// Mocks generated by Mockito 5.3.2 from annotations
// in zc_desktop_flutter/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;
import 'dart:io' as _i13;
import 'dart:ui' as _i21;

import 'package:centrifuge/centrifuge.dart' as _i8;
import 'package:dio/dio.dart' as _i3;
import 'package:dio_cache_interceptor/dio_cache_interceptor.dart' as _i4;
import 'package:flutter/material.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stacked_services/stacked_services.dart' as _i9;
import 'package:zc_desktop_flutter/model/app_models.dart' as _i5;
import 'package:zc_desktop_flutter/services/auth_service.dart' as _i6;
import 'package:zc_desktop_flutter/services/centrifuge_service.dart' as _i7;
import 'package:zc_desktop_flutter/services/channels_service.dart' as _i14;
import 'package:zc_desktop_flutter/services/dm_service.dart' as _i15;
import 'package:zc_desktop_flutter/services/local_storage_service.dart' as _i16;
import 'package:zc_desktop_flutter/services/organization_service.dart' as _i17;
import 'package:zc_desktop_flutter/services/recent_search_service.dart' as _i18;
import 'package:zc_desktop_flutter/services/startup_service.dart' as _i11;
import 'package:zc_desktop_flutter/services/user_service.dart' as _i19;
import 'package:zc_desktop_flutter/services/window_title_bar_service.dart'
    as _i20;
import 'package:zc_desktop_flutter/services/zuri_api/zuri_api_service.dart'
    as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamController_0<T> extends _i1.SmartFake
    implements _i2.StreamController<T> {
  _FakeStreamController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_1<T> extends _i1.SmartFake
    implements _i2.StreamSubscription<T> {
  _FakeStreamSubscription_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDio_2 extends _i1.SmartFake implements _i3.Dio {
  _FakeDio_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCacheOptions_3 extends _i1.SmartFake implements _i4.CacheOptions {
  _FakeCacheOptions_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMember_4 extends _i1.SmartFake implements _i5.Member {
  _FakeMember_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_5 extends _i1.SmartFake implements _i5.User {
  _FakeUser_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUsers_6 extends _i1.SmartFake implements _i5.Users {
  _FakeUsers_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChannel_7 extends _i1.SmartFake implements _i5.Channel {
  _FakeChannel_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSendMessageResponse_8 extends _i1.SmartFake
    implements _i5.SendMessageResponse {
  _FakeSendMessageResponse_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuth_9 extends _i1.SmartFake implements _i5.Auth {
  _FakeAuth_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserProfile_10 extends _i1.SmartFake implements _i5.UserProfile {
  _FakeUserProfile_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOrganization_11 extends _i1.SmartFake implements _i5.Organization {
  _FakeOrganization_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i6.AuthService {
  @override
  set auth(_i5.Auth? _auth) => super.noSuchMethod(
        Invocation.setter(
          #auth,
          _auth,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<void> loginUser({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginUser,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> signup({
    required String? password,
    required String? email,
    String? fName,
    String? lName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signup,
          [],
          {
            #password: password,
            #email: email,
            #fName: fName,
            #lName: lName,
          },
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> confirmEmail(String? otpCode) => (super.noSuchMethod(
        Invocation.method(
          #confirmEmail,
          [otpCode],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> requestPasswordResetCode(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestPasswordResetCode,
          [email],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> verifyPasswordResetCode(String? resetCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyPasswordResetCode,
          [resetCode],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> updateUserPassword(String? password) => (super.noSuchMethod(
        Invocation.method(
          #updateUserPassword,
          [password],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  void logOut(String? token) => super.noSuchMethod(
        Invocation.method(
          #logOut,
          [token],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CentrifugeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCentrifugeService extends _i1.Mock implements _i7.CentrifugeService {
  @override
  _i2.StreamController<dynamic> get messageStreamController =>
      (super.noSuchMethod(
        Invocation.getter(#messageStreamController),
        returnValue: _FakeStreamController_0<dynamic>(
          this,
          Invocation.getter(#messageStreamController),
        ),
      ) as _i2.StreamController<dynamic>);
  @override
  set messageStreamController(
          _i2.StreamController<dynamic>? _messageStreamController) =>
      super.noSuchMethod(
        Invocation.setter(
          #messageStreamController,
          _messageStreamController,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, _i8.Subscription> get subList => (super.noSuchMethod(
        Invocation.getter(#subList),
        returnValue: <String, _i8.Subscription>{},
      ) as Map<String, _i8.Subscription>);
  @override
  set subList(Map<String, _i8.Subscription>? _subList) => super.noSuchMethod(
        Invocation.setter(
          #subList,
          _subList,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void disconnect() => super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.StreamSubscription<dynamic> listen({
    required String? socketId,
    required dynamic channelId,
    required dynamic Function(Map<dynamic, dynamic>)? onData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [],
          {
            #socketId: socketId,
            #channelId: channelId,
            #onData: onData,
          },
        ),
        returnValue: _FakeStreamSubscription_1<dynamic>(
          this,
          Invocation.method(
            #listen,
            [],
            {
              #socketId: socketId,
              #channelId: channelId,
              #onData: onData,
            },
          ),
        ),
      ) as _i2.StreamSubscription<dynamic>);
  @override
  _i2.StreamSubscription<dynamic> listenDM({
    required String? socketId,
    required dynamic roomID,
    required dynamic Function(Map<dynamic, dynamic>)? onData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenDM,
          [],
          {
            #socketId: socketId,
            #roomID: roomID,
            #onData: onData,
          },
        ),
        returnValue: _FakeStreamSubscription_1<dynamic>(
          this,
          Invocation.method(
            #listenDM,
            [],
            {
              #socketId: socketId,
              #roomID: roomID,
              #onData: onData,
            },
          ),
        ),
      ) as _i2.StreamSubscription<dynamic>);
  @override
  _i2.StreamSubscription<dynamic> onNotificationReceived({
    required String? channelId,
    required dynamic Function(Map<dynamic, dynamic>)? onData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #onNotificationReceived,
          [],
          {
            #channelId: channelId,
            #onData: onData,
          },
        ),
        returnValue: _FakeStreamSubscription_1<dynamic>(
          this,
          Invocation.method(
            #onNotificationReceived,
            [],
            {
              #channelId: channelId,
              #onData: onData,
            },
          ),
        ),
      ) as _i2.StreamSubscription<dynamic>);
  @override
  bool hasSubscribed(String? socketId) => (super.noSuchMethod(
        Invocation.method(
          #hasSubscribed,
          [socketId],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i2.Future<_i2.Stream<dynamic>?> subscribe(String? channelSocketId) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [channelSocketId],
        ),
        returnValue: _i2.Future<_i2.Stream<dynamic>?>.value(),
      ) as _i2.Future<_i2.Stream<dynamic>?>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i9.NavigationService {
  @override
  String get previousRoute => (super.noSuchMethod(
        Invocation.getter(#previousRoute),
        returnValue: '',
      ) as String);
  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: '',
      ) as String);
  @override
  _i10.GlobalKey<_i10.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(Invocation.method(
        #nestedNavigationKey,
        [index],
      )) as _i10.GlobalKey<_i10.NavigatorState>?);
  @override
  void config({
    bool? enableLog,
    bool? defaultPopGesture,
    bool? defaultOpaqueRoute,
    Duration? defaultDurationTransition,
    bool? defaultGlobalState,
    _i9.Transition? defaultTransitionStyle,
    String? defaultTransition,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #config,
          [],
          {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<T?>? navigateWithTransition<T>(
    _i10.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i10.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i9.Transition? transitionClass,
    _i9.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #navigateWithTransition,
        [page],
        {
          #opaque: opaque,
          #transition: transition,
          #duration: duration,
          #popGesture: popGesture,
          #id: id,
          #curve: curve,
          #fullscreenDialog: fullscreenDialog,
          #preventDuplicates: preventDuplicates,
          #transitionClass: transitionClass,
          #transitionStyle: transitionStyle,
          #routeName: routeName,
        },
      )) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? replaceWithTransition<T>(
    _i10.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i10.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i9.Transition? transitionClass,
    _i9.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #replaceWithTransition,
        [page],
        {
          #opaque: opaque,
          #transition: transition,
          #duration: duration,
          #popGesture: popGesture,
          #id: id,
          #curve: curve,
          #fullscreenDialog: fullscreenDialog,
          #preventDuplicates: preventDuplicates,
          #transitionClass: transitionClass,
          #transitionStyle: transitionStyle,
          #routeName: routeName,
        },
      )) as _i2.Future<T?>?);
  @override
  bool back<T>({
    dynamic result,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {
            #result: result,
            #id: id,
          },
        ),
        returnValue: false,
      ) as bool);
  @override
  void popUntil(
    _i10.RoutePredicate? predicate, {
    int? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void popRepeated(int? popTimes) => super.noSuchMethod(
        Invocation.method(
          #popRepeated,
          [popTimes],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<T?>? navigateTo<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i10.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #navigateTo,
        [routeName],
        {
          #arguments: arguments,
          #id: id,
          #preventDuplicates: preventDuplicates,
          #parameters: parameters,
          #transition: transition,
        },
      )) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? navigateToView<T>(
    _i10.Widget? view, {
    dynamic arguments,
    int? id,
    bool? opaque,
    _i10.Curve? curve,
    Duration? duration,
    bool? fullscreenDialog = false,
    bool? popGesture,
    bool? preventDuplicates = true,
    _i9.Transition? transition,
    _i9.Transition? transitionStyle,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #navigateToView,
        [view],
        {
          #arguments: arguments,
          #id: id,
          #opaque: opaque,
          #curve: curve,
          #duration: duration,
          #fullscreenDialog: fullscreenDialog,
          #popGesture: popGesture,
          #preventDuplicates: preventDuplicates,
          #transition: transition,
          #transitionStyle: transitionStyle,
        },
      )) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? replaceWith<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i10.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #replaceWith,
        [routeName],
        {
          #arguments: arguments,
          #id: id,
          #preventDuplicates: preventDuplicates,
          #parameters: parameters,
          #transition: transition,
        },
      )) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? clearStackAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #clearStackAndShow,
        [routeName],
        {
          #arguments: arguments,
          #id: id,
          #parameters: parameters,
        },
      )) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? clearStackAndShowView<T>(
    _i10.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #clearStackAndShowView,
        [view],
        {
          #arguments: arguments,
          #id: id,
        },
      )) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? clearTillFirstAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #clearTillFirstAndShow,
        [routeName],
        {
          #arguments: arguments,
          #id: id,
          #preventDuplicates: preventDuplicates,
          #parameters: parameters,
        },
      )) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? clearTillFirstAndShowView<T>(
    _i10.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #clearTillFirstAndShowView,
        [view],
        {
          #arguments: arguments,
          #id: id,
        },
      )) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? pushNamedAndRemoveUntil<T>(
    String? routeName, {
    _i10.RoutePredicate? predicate,
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #pushNamedAndRemoveUntil,
        [routeName],
        {
          #predicate: predicate,
          #arguments: arguments,
          #id: id,
        },
      )) as _i2.Future<T?>?);
}

/// A class which mocks [StartupService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStartupService extends _i1.Mock implements _i11.StartupService {
  @override
  bool get hasLoggedInUser => (super.noSuchMethod(
        Invocation.getter(#hasLoggedInUser),
        returnValue: false,
      ) as bool);
  @override
  void checkIfUserSavedToDisk() => super.noSuchMethod(
        Invocation.method(
          #checkIfUserSavedToDisk,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ZuriApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockZuriApiService extends _i1.Mock implements _i12.ZuriApiService {
  @override
  _i3.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_2(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i3.Dio);
  @override
  _i4.CacheOptions get cacheOptions => (super.noSuchMethod(
        Invocation.getter(#cacheOptions),
        returnValue: _FakeCacheOptions_3(
          this,
          Invocation.getter(#cacheOptions),
        ),
      ) as _i4.CacheOptions);
  @override
  _i2.Future<void> confirmEmail({required String? otpCode}) =>
      (super.noSuchMethod(
        Invocation.method(
          #confirmEmail,
          [],
          {#otpCode: otpCode},
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<dynamic> login({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<void> requestPasswordResetCode({required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestPasswordResetCode,
          [],
          {#email: email},
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> signup({
    required String? password,
    required String? email,
    required String? fName,
    required String? lName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signup,
          [],
          {
            #password: password,
            #email: email,
            #fName: fName,
            #lName: lName,
          },
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> updateUserPassword({
    required String? password,
    required String? code,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserPassword,
          [],
          {
            #password: password,
            #code: code,
          },
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> verifyPasswordResetCode({required String? resetCode}) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyPasswordResetCode,
          [],
          {#resetCode: resetCode},
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> addLoggedInUserToOrganization({
    required String? organizationId,
    required String? email,
    required dynamic token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addLoggedInUserToOrganization,
          [],
          {
            #organizationId: organizationId,
            #email: email,
            #token: token,
          },
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<dynamic> invitePeopleToOrganization({
    required String? organizationId,
    required List<String>? email,
    required dynamic token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #invitePeopleToOrganization,
          [],
          {
            #organizationId: organizationId,
            #email: email,
            #token: token,
          },
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<Map<String, dynamic>> createOrganizationUsingEmail({
    required String? email,
    required dynamic token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createOrganizationUsingEmail,
          [],
          {
            #email: email,
            #token: token,
          },
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> fetchOrganizationDetails({
    required String? organizationId,
    required dynamic token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchOrganizationDetails,
          [],
          {
            #organizationId: organizationId,
            #token: token,
          },
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> fetchOrganizationsListFromRemote({
    required String? email,
    required dynamic token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchOrganizationsListFromRemote,
          [],
          {
            #email: email,
            #token: token,
          },
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<dynamic> sendMessageToChannel({
    dynamic channel_id,
    dynamic senderId,
    dynamic message,
    dynamic organization_id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessageToChannel,
          [],
          {
            #channel_id: channel_id,
            #senderId: senderId,
            #message: message,
            #organization_id: organization_id,
          },
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<String> fetchChannelSocketId({
    required String? channelId,
    required String? organizationId,
    required dynamic token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchChannelSocketId,
          [],
          {
            #channelId: channelId,
            #organizationId: organizationId,
            #token: token,
          },
        ),
        returnValue: _i2.Future<String>.value(''),
      ) as _i2.Future<String>);
  @override
  _i2.Future<dynamic> fetchChannelsListUsingOrgId({
    String? organizationId,
    required dynamic token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchChannelsListUsingOrgId,
          [],
          {
            #organizationId: organizationId,
            #token: token,
          },
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> addUserToChannel(
    dynamic organizationId,
    dynamic channelId, {
    String? id,
    String? role_id,
    bool? is_admin,
    String? prop1,
    String? prop2,
    String? prop3,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUserToChannel,
          [
            organizationId,
            channelId,
          ],
          {
            #id: id,
            #role_id: role_id,
            #is_admin: is_admin,
            #prop1: prop1,
            #prop2: prop2,
            #prop3: prop3,
          },
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> fetchChannelMessages({
    required String? channelId,
    required String? organizationId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchChannelMessages,
          [],
          {
            #channelId: channelId,
            #organizationId: organizationId,
          },
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<Map<String, dynamic>> sendMessageToDM({
    dynamic roomId,
    dynamic senderId,
    dynamic message,
    dynamic orgId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessageToDM,
          [],
          {
            #roomId: roomId,
            #senderId: senderId,
            #message: message,
            #orgId: orgId,
          },
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> markMessageAsRead(dynamic messageId) =>
      (super.noSuchMethod(
        Invocation.method(
          #markMessageAsRead,
          [messageId],
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> getRoomInfo({dynamic roomId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRoomInfo,
          [],
          {#roomId: roomId},
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> fetchRoomMessages({
    dynamic roomId,
    dynamic orgId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchRoomMessages,
          [],
          {
            #roomId: roomId,
            #orgId: orgId,
          },
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> createRoom({
    _i5.User? currentUser,
    _i5.Users? user,
    String? orgId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createRoom,
          [],
          {
            #currentUser: currentUser,
            #user: user,
            #orgId: orgId,
          },
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> reactToMessage({
    dynamic orgId,
    dynamic roomId,
    dynamic messageId,
    required _i5.ReactToMessage? reactToMessage,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #reactToMessage,
          [],
          {
            #orgId: orgId,
            #roomId: roomId,
            #messageId: messageId,
            #reactToMessage: reactToMessage,
          },
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<dynamic> fetchFileListUsingOrgId({
    required String? orgId,
    required dynamic token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchFileListUsingOrgId,
          [],
          {
            #orgId: orgId,
            #token: token,
          },
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<List<_i5.Users>> fetchMemberListUsingOrgId({
    required String? organizationId,
    required dynamic token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMemberListUsingOrgId,
          [],
          {
            #organizationId: organizationId,
            #token: token,
          },
        ),
        returnValue: _i2.Future<List<_i5.Users>>.value(<_i5.Users>[]),
      ) as _i2.Future<List<_i5.Users>>);
  @override
  _i2.Future<dynamic> fetchDMs({
    dynamic orgId,
    dynamic userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDMs,
          [],
          {
            #orgId: orgId,
            #userId: userId,
          },
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<Map<String, dynamic>> getUserProfile({
    dynamic orgId,
    dynamic memberId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserProfile,
          [],
          {
            #orgId: orgId,
            #memberId: memberId,
          },
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<_i5.Member> fetchMemberDetail({
    required String? organizationId,
    required String? memberId,
    required String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMemberDetail,
          [],
          {
            #organizationId: organizationId,
            #memberId: memberId,
            #token: token,
          },
        ),
        returnValue: _i2.Future<_i5.Member>.value(_FakeMember_4(
          this,
          Invocation.method(
            #fetchMemberDetail,
            [],
            {
              #organizationId: organizationId,
              #memberId: memberId,
              #token: token,
            },
          ),
        )),
      ) as _i2.Future<_i5.Member>);
  @override
  _i2.Future<Map<String, dynamic>> getMemberDetails({
    required String? organizationId,
    required String? memberId,
    required String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberDetails,
          [],
          {
            #organizationId: organizationId,
            #memberId: memberId,
            #token: token,
          },
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<_i5.User> fetchUserDetail({String? userId}) => (super.noSuchMethod(
        Invocation.method(
          #fetchUserDetail,
          [],
          {#userId: userId},
        ),
        returnValue: _i2.Future<_i5.User>.value(_FakeUser_5(
          this,
          Invocation.method(
            #fetchUserDetail,
            [],
            {#userId: userId},
          ),
        )),
      ) as _i2.Future<_i5.User>);
  @override
  _i2.Future<Map<String, dynamic>> getUserDetails({required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserDetails,
          [],
          {#userId: userId},
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<void> updateUserDetails({
    required String? organizationId,
    required String? memberId,
    required dynamic token,
    String? bio,
    String? displayName,
    String? firstName,
    String? lastName,
    String? phoneNumber,
    String? pronoun,
    String? timeZone,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserDetails,
          [],
          {
            #organizationId: organizationId,
            #memberId: memberId,
            #token: token,
            #bio: bio,
            #displayName: displayName,
            #firstName: firstName,
            #lastName: lastName,
            #phoneNumber: phoneNumber,
            #pronoun: pronoun,
            #timeZone: timeZone,
          },
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<List<_i5.Todo>> fetchTodoList() => (super.noSuchMethod(
        Invocation.method(
          #fetchTodoList,
          [],
        ),
        returnValue: _i2.Future<List<_i5.Todo>>.value(<_i5.Todo>[]),
      ) as _i2.Future<List<_i5.Todo>>);
  @override
  _i2.Future<void> createTodo(
    _i5.Todo? todo,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTodo,
          [
            todo,
            token,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> signOut(String? token) => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [token],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<dynamic> removeUserFromChannel({
    required dynamic organizationId,
    required dynamic channelId,
    required dynamic memberId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeUserFromChannel,
          [],
          {
            #organizationId: organizationId,
            #channelId: channelId,
            #memberId: memberId,
          },
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<Map<String, dynamic>> UpdateUserDetails({
    required dynamic organizationId,
    required dynamic memberId,
    required dynamic token,
    String? bio,
    String? displayName,
    String? firstName,
    String? lastName,
    String? phoneNumber,
    String? pronoun,
    String? timeZone,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #UpdateUserDetails,
          [],
          {
            #organizationId: organizationId,
            #memberId: memberId,
            #token: token,
            #bio: bio,
            #displayName: displayName,
            #firstName: firstName,
            #lastName: lastName,
            #phoneNumber: phoneNumber,
            #pronoun: pronoun,
            #timeZone: timeZone,
          },
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> UpdateUserPicture({
    required dynamic organizationId,
    required dynamic memberId,
    required dynamic token,
    _i13.File? img,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #UpdateUserPicture,
          [],
          {
            #organizationId: organizationId,
            #memberId: memberId,
            #token: token,
            #img: img,
          },
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<_i5.Member> patchProfilePicture({
    required String? organizationId,
    required String? memberId,
    required String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchProfilePicture,
          [],
          {
            #organizationId: organizationId,
            #memberId: memberId,
            #token: token,
          },
        ),
        returnValue: _i2.Future<_i5.Member>.value(_FakeMember_4(
          this,
          Invocation.method(
            #patchProfilePicture,
            [],
            {
              #organizationId: organizationId,
              #memberId: memberId,
              #token: token,
            },
          ),
        )),
      ) as _i2.Future<_i5.Member>);
  @override
  _i2.Future<dynamic> createChannelsUsingOrgId({
    required dynamic sessionId,
    required dynamic insertedOrganization,
    String? name,
    String? owner,
    String? description,
    bool? private,
    String? topic,
    bool? defaultChannel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createChannelsUsingOrgId,
          [],
          {
            #sessionId: sessionId,
            #insertedOrganization: insertedOrganization,
            #name: name,
            #owner: owner,
            #description: description,
            #private: private,
            #topic: topic,
            #defaultChannel: defaultChannel,
          },
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<Map<String, dynamic>> deleteOrganization({
    required String? organizationId,
    required dynamic token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteOrganization,
          [],
          {
            #organizationId: organizationId,
            #token: token,
          },
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> fetchPinnedMessgaes(
    dynamic roomId,
    dynamic orgId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPinnedMessgaes,
          [
            roomId,
            orgId,
          ],
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> pinMessage(
    dynamic messageId,
    dynamic orgId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #pinMessage,
          [
            messageId,
            orgId,
          ],
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> updateOrganizationDetails({
    required String? organizationId,
    required dynamic token,
    String? url,
    String? name,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrganizationDetails,
          [],
          {
            #organizationId: organizationId,
            #token: token,
            #url: url,
            #name: name,
          },
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> updateOrganizationName({
    required String? name,
    required String? organizationId,
    required String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrganizationName,
          [],
          {
            #name: name,
            #organizationId: organizationId,
            #token: token,
          },
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> updateOrganizationUrl({
    required String? url,
    required String? organizationId,
    required String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrganizationUrl,
          [],
          {
            #url: url,
            #organizationId: organizationId,
            #token: token,
          },
        ),
        returnValue:
            _i2.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<dynamic> updateUserDetail({
    required String? organizationId,
    required String? memberId,
    required String? token,
    String? bio,
    String? displayName,
    String? lastName,
    String? firstName,
    String? phoneNumber,
    String? pronoun,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserDetail,
          [],
          {
            #organizationId: organizationId,
            #memberId: memberId,
            #token: token,
            #bio: bio,
            #displayName: displayName,
            #lastName: lastName,
            #firstName: firstName,
            #phoneNumber: phoneNumber,
            #pronoun: pronoun,
          },
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> updateUserPicture({
    required dynamic organizationId,
    required dynamic memberId,
    required dynamic token,
    required _i13.File? url,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserPicture,
          [],
          {
            #organizationId: organizationId,
            #memberId: memberId,
            #token: token,
            #url: url,
          },
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
}

/// A class which mocks [ChannelsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChannelsService extends _i1.Mock implements _i14.ChannelsService {
  @override
  String get selectedCreatedOrganisationId => (super.noSuchMethod(
        Invocation.getter(#selectedCreatedOrganisationId),
        returnValue: '',
      ) as String);
  @override
  void setUser(_i5.Users? user) => super.noSuchMethod(
        Invocation.method(
          #setUser,
          [user],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<_i5.Users> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i2.Future<_i5.Users>.value(_FakeUsers_6(
          this,
          Invocation.method(
            #getUser,
            [],
          ),
        )),
      ) as _i2.Future<_i5.Users>);
  @override
  void saveChannelId(String? channelId) => super.noSuchMethod(
        Invocation.method(
          #saveChannelId,
          [channelId],
        ),
        returnValueForMissingStub: null,
      );
  @override
  String getChannelId() => (super.noSuchMethod(
        Invocation.method(
          #getChannelId,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  void saveChannelList(List<_i5.Channel>? channels) => super.noSuchMethod(
        Invocation.method(
          #saveChannelList,
          [channels],
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i5.Channel> getChannelList() => (super.noSuchMethod(
        Invocation.method(
          #getChannelList,
          [],
        ),
        returnValue: <_i5.Channel>[],
      ) as List<_i5.Channel>);
  @override
  void setChannel(_i5.Channel? channel) => super.noSuchMethod(
        Invocation.method(
          #setChannel,
          [channel],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Channel getChannel() => (super.noSuchMethod(
        Invocation.method(
          #getChannel,
          [],
        ),
        returnValue: _FakeChannel_7(
          this,
          Invocation.method(
            #getChannel,
            [],
          ),
        ),
      ) as _i5.Channel);
  @override
  _i2.Future<List<_i5.Channel>> getChannels({String? organizationId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChannels,
          [],
          {#organizationId: organizationId},
        ),
        returnValue: _i2.Future<List<_i5.Channel>>.value(<_i5.Channel>[]),
      ) as _i2.Future<List<_i5.Channel>>);
  @override
  _i2.Future<_i5.Channel> createChannels({
    String? name,
    String? owner,
    String? description,
    bool? private,
    String? topic,
    bool? defaultChannel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createChannels,
          [],
          {
            #name: name,
            #owner: owner,
            #description: description,
            #private: private,
            #topic: topic,
            #defaultChannel: defaultChannel,
          },
        ),
        returnValue: _i2.Future<_i5.Channel>.value(_FakeChannel_7(
          this,
          Invocation.method(
            #createChannels,
            [],
            {
              #name: name,
              #owner: owner,
              #description: description,
              #private: private,
              #topic: topic,
              #defaultChannel: defaultChannel,
            },
          ),
        )),
      ) as _i2.Future<_i5.Channel>);
  @override
  _i2.Future<void> addUserToChannel({
    required String? id,
    required String? role_id,
    required bool? is_admin,
    String? prop1,
    String? prop2,
    String? prop3,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUserToChannel,
          [],
          {
            #id: id,
            #role_id: role_id,
            #is_admin: is_admin,
            #prop1: prop1,
            #prop2: prop2,
            #prop3: prop3,
          },
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> handleRemoveUserFromChannel({
    required String? channel_id,
    required String? member_id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleRemoveUserFromChannel,
          [],
          {
            #channel_id: channel_id,
            #member_id: member_id,
          },
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<dynamic> sendMessage({
    dynamic channel_id,
    dynamic senderId,
    dynamic message,
    dynamic org_id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [],
          {
            #channel_id: channel_id,
            #senderId: senderId,
            #message: message,
            #org_id: org_id,
          },
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<List<_i5.ChannelMessage>> fetchChannelMessages(
          String? channelId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchChannelMessages,
          [channelId],
        ),
        returnValue:
            _i2.Future<List<_i5.ChannelMessage>>.value(<_i5.ChannelMessage>[]),
      ) as _i2.Future<List<_i5.ChannelMessage>>);
  @override
  _i2.Future<String> fetchChannelSocketId() => (super.noSuchMethod(
        Invocation.method(
          #fetchChannelSocketId,
          [],
        ),
        returnValue: _i2.Future<String>.value(''),
      ) as _i2.Future<String>);
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DMService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDMService extends _i1.Mock implements _i15.DMService {
  @override
  _i5.Users get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakeUsers_6(
          this,
          Invocation.getter(#user),
        ),
      ) as _i5.Users);
  @override
  set user(_i5.Users? _user) => super.noSuchMethod(
        Invocation.setter(
          #user,
          _user,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set dmRoomInfo(_i5.DM? _dmRoomInfo) => super.noSuchMethod(
        Invocation.setter(
          #dmRoomInfo,
          _dmRoomInfo,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setUser(_i5.Users? user) => super.noSuchMethod(
        Invocation.method(
          #setUser,
          [user],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<_i5.Users> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i2.Future<_i5.Users>.value(_FakeUsers_6(
          this,
          Invocation.method(
            #getUser,
            [],
          ),
        )),
      ) as _i2.Future<_i5.Users>);
  @override
  void setExistingRoomInfo(_i5.DM? dm) => super.noSuchMethod(
        Invocation.method(
          #setExistingRoomInfo,
          [dm],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<void> setNewRoomInfo(_i5.Users? user) => (super.noSuchMethod(
        Invocation.method(
          #setNewRoomInfo,
          [user],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<_i5.SendMessageResponse> sendMessage(
    dynamic roomId,
    dynamic senderId,
    dynamic message,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [
            roomId,
            senderId,
            message,
          ],
        ),
        returnValue: _i2.Future<_i5.SendMessageResponse>.value(
            _FakeSendMessageResponse_8(
          this,
          Invocation.method(
            #sendMessage,
            [
              roomId,
              senderId,
              message,
            ],
          ),
        )),
      ) as _i2.Future<_i5.SendMessageResponse>);
  @override
  _i2.Future<String> createRoom(
    _i5.User? currentUser,
    _i5.Users? user,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createRoom,
          [
            currentUser,
            user,
          ],
        ),
        returnValue: _i2.Future<String>.value(''),
      ) as _i2.Future<String>);
  @override
  _i2.Future<_i5.DM?> getRoomInfo(dynamic roomId) => (super.noSuchMethod(
        Invocation.method(
          #getRoomInfo,
          [roomId],
        ),
        returnValue: _i2.Future<_i5.DM?>.value(),
      ) as _i2.Future<_i5.DM?>);
  @override
  _i2.Future<List<_i5.DMRoomsResponse>> getDMs(dynamic orgId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDMs,
          [orgId],
        ),
        returnValue: _i2.Future<List<_i5.DMRoomsResponse>>.value(
            <_i5.DMRoomsResponse>[]),
      ) as _i2.Future<List<_i5.DMRoomsResponse>>);
  @override
  _i2.Future<List<_i5.Results>> fetchRoomMessages(dynamic roomId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchRoomMessages,
          [roomId],
        ),
        returnValue: _i2.Future<List<_i5.Results>>.value(<_i5.Results>[]),
      ) as _i2.Future<List<_i5.Results>>);
  @override
  _i2.Future<void> markMessageAsRead(dynamic messageId) => (super.noSuchMethod(
        Invocation.method(
          #markMessageAsRead,
          [messageId],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> reactToMessage(
    dynamic roomId,
    dynamic messageId,
    _i5.ReactToMessage? reactToMessage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #reactToMessage,
          [
            roomId,
            messageId,
            reactToMessage,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<String> fetchChannelSocketId(dynamic roomId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchChannelSocketId,
          [roomId],
        ),
        returnValue: _i2.Future<String>.value(''),
      ) as _i2.Future<String>);
  @override
  _i2.Future<List<_i5.Users>> fetchAllUsersForDm() => (super.noSuchMethod(
        Invocation.method(
          #fetchAllUsersForDm,
          [],
        ),
        returnValue: _i2.Future<List<_i5.Users>>.value(<_i5.Users>[]),
      ) as _i2.Future<List<_i5.Users>>);
  @override
  _i2.Future<void> pinMessage(String? messageId) => (super.noSuchMethod(
        Invocation.method(
          #pinMessage,
          [messageId],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<List<String>> fetchPinnedMessages(String? roomId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPinnedMessages,
          [roomId],
        ),
        returnValue: _i2.Future<List<String>>.value(<String>[]),
      ) as _i2.Future<List<String>>);
}

/// A class which mocks [LocalStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageService extends _i1.Mock
    implements _i16.LocalStorageService {
  @override
  void setAuthResponse(_i5.AuthResponse? authResponseToSave) =>
      super.noSuchMethod(
        Invocation.method(
          #setAuthResponse,
          [authResponseToSave],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeAuthResponse() => super.noSuchMethod(
        Invocation.method(
          #removeAuthResponse,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setAccessibility(_i5.Accessibility? accessibilityResponseToSave) =>
      super.noSuchMethod(
        Invocation.method(
          #setAccessibility,
          [accessibilityResponseToSave],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setAdvanced(_i5.Advanced? advanced) => super.noSuchMethod(
        Invocation.method(
          #setAdvanced,
          [advanced],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setAudioAndVideo(_i5.AudioAndVideo? audioAndVideo) => super.noSuchMethod(
        Invocation.method(
          #setAudioAndVideo,
          [audioAndVideo],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setMessagesAndMedia(_i5.MessagesAndMedia? media) => super.noSuchMethod(
        Invocation.method(
          #setMessagesAndMedia,
          [media],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setNotification(_i5.Notifications? notification) => super.noSuchMethod(
        Invocation.method(
          #setNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setSideBar(_i5.SideBar? sideBar) => super.noSuchMethod(
        Invocation.method(
          #setSideBar,
          [sideBar],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setThemes(_i5.Themes? themes) => super.noSuchMethod(
        Invocation.method(
          #setThemes,
          [themes],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<void> saveToDisk<T>(
    String? key,
    T? content,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveToDisk,
          [
            key,
            content,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  Object? getFromDisk(String? key) => (super.noSuchMethod(Invocation.method(
        #getFromDisk,
        [key],
      )) as Object?);
  @override
  _i2.Future<bool> removeFromDisk(String? key) => (super.noSuchMethod(
        Invocation.method(
          #removeFromDisk,
          [key],
        ),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
  @override
  void setOrganizationResponse(
          _i5.OrganizationResponse? organizationResponseToSave) =>
      super.noSuchMethod(
        Invocation.method(
          #setOrganizationResponse,
          [organizationResponseToSave],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [OrganizationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrganizationService extends _i1.Mock
    implements _i17.OrganizationService {
  @override
  set organization(_i5.Organization? _organization) => super.noSuchMethod(
        Invocation.setter(
          #organization,
          _organization,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Auth get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeAuth_9(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i5.Auth);
  @override
  List<_i5.DM> get dm => (super.noSuchMethod(
        Invocation.getter(#dm),
        returnValue: <_i5.DM>[],
      ) as List<_i5.DM>);
  @override
  int get selectedOrganization => (super.noSuchMethod(
        Invocation.getter(#selectedOrganization),
        returnValue: 0,
      ) as int);
  @override
  void setDms(List<_i5.DM>? dm) => super.noSuchMethod(
        Invocation.method(
          #setDms,
          [dm],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void saveOrganizationId(String? orgId) => super.noSuchMethod(
        Invocation.method(
          #saveOrganizationId,
          [orgId],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void saveMemberId(String? memId) => super.noSuchMethod(
        Invocation.method(
          #saveMemberId,
          [memId],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<void> updateOrganizationUrl({
    required String? url,
    required String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrganizationUrl,
          [],
          {
            #url: url,
            #token: token,
          },
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> updateOrganizationName({
    required String? name,
    required String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOrganizationName,
          [],
          {
            #name: name,
            #token: token,
          },
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  String getOrganizationId() => (super.noSuchMethod(
        Invocation.method(
          #getOrganizationId,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  String getMemberId() => (super.noSuchMethod(
        Invocation.method(
          #getMemberId,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  void changeSelectedOrganization(int? index) => super.noSuchMethod(
        Invocation.method(
          #changeSelectedOrganization,
          [index],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<List<_i5.Organization>> getOrganizations() => (super.noSuchMethod(
        Invocation.method(
          #getOrganizations,
          [],
        ),
        returnValue:
            _i2.Future<List<_i5.Organization>>.value(<_i5.Organization>[]),
      ) as _i2.Future<List<_i5.Organization>>);
  @override
  _i2.Future<void> addMemberToOrganization(
    String? organizationId, {
    String? email,
    String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMemberToOrganization,
          [organizationId],
          {
            #email: email,
            #token: token,
          },
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<dynamic> invitePeopleToOrganization(
    String? organizationId,
    List<String>? email,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #invitePeopleToOrganization,
          [
            organizationId,
            email,
          ],
        ),
        returnValue: _i2.Future<dynamic>.value(),
      ) as _i2.Future<dynamic>);
  @override
  _i2.Future<List<_i5.Users>> fetchMemberListUsingOrgId(
    String? organizationId,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMemberListUsingOrgId,
          [
            organizationId,
            token,
          ],
        ),
        returnValue: _i2.Future<List<_i5.Users>>.value(<_i5.Users>[]),
      ) as _i2.Future<List<_i5.Users>>);
  @override
  _i2.Future<void> createOrganization(String? email) => (super.noSuchMethod(
        Invocation.method(
          #createOrganization,
          [email],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  List<_i5.Organization> getUserSelectedOrganisations() => (super.noSuchMethod(
        Invocation.method(
          #getUserSelectedOrganisations,
          [],
        ),
        returnValue: <_i5.Organization>[],
      ) as List<_i5.Organization>);
  @override
  _i2.Future<void> saveUserSelectedOrganizations(
          List<_i5.Organization>? organizations) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveUserSelectedOrganizations,
          [organizations],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<_i5.UserProfile> getUserProfile(
    String? organizationId,
    String? memberId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserProfile,
          [
            organizationId,
            memberId,
          ],
        ),
        returnValue: _i2.Future<_i5.UserProfile>.value(_FakeUserProfile_10(
          this,
          Invocation.method(
            #getUserProfile,
            [
              organizationId,
              memberId,
            ],
          ),
        )),
      ) as _i2.Future<_i5.UserProfile>);
  @override
  _i2.Future<void> updateUser({
    String? bio,
    String? displayName,
    String? firstName,
    String? lastName,
    String? phoneNumber,
    String? pronoun,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [],
          {
            #bio: bio,
            #displayName: displayName,
            #firstName: firstName,
            #lastName: lastName,
            #phoneNumber: phoneNumber,
            #pronoun: pronoun,
          },
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> updateUserImage({
    String? token,
    required _i13.File? url,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserImage,
          [],
          {
            #token: token,
            #url: url,
          },
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}

/// A class which mocks [RecentSearchService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecentSearchService extends _i1.Mock
    implements _i18.RecentSearchService {
  @override
  _i2.Future<void> setRecentSearch(String? query) => (super.noSuchMethod(
        Invocation.method(
          #setRecentSearch,
          [query],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<List<String>> getRecentSearch() => (super.noSuchMethod(
        Invocation.method(
          #getRecentSearch,
          [],
        ),
        returnValue: _i2.Future<List<String>>.value(<String>[]),
      ) as _i2.Future<List<String>>);
  @override
  _i2.Future<void> destroyRecentSearch() => (super.noSuchMethod(
        Invocation.method(
          #destroyRecentSearch,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i19.UserService {
  @override
  _i5.Auth get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeAuth_9(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i5.Auth);
  @override
  _i5.Organization get organization => (super.noSuchMethod(
        Invocation.getter(#organization),
        returnValue: _FakeOrganization_11(
          this,
          Invocation.getter(#organization),
        ),
      ) as _i5.Organization);
  @override
  String getUserId() => (super.noSuchMethod(
        Invocation.method(
          #getUserId,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  _i2.Future<void> fetchMemberDetails(String? displayName) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMemberDetails,
          [displayName],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  _i2.Future<void> getmember() => (super.noSuchMethod(
        Invocation.method(
          #getmember,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}

/// A class which mocks [WindowTitleBarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWindowTitleBarService extends _i1.Mock
    implements _i20.WindowTitleBarService {
  @override
  bool get IsHome => (super.noSuchMethod(
        Invocation.getter(#IsHome),
        returnValue: false,
      ) as bool);
  @override
  String get Title => (super.noSuchMethod(
        Invocation.getter(#Title),
        returnValue: '',
      ) as String);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  void setHome(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setHome,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setTitle(String? value) => super.noSuchMethod(
        Invocation.method(
          #setTitle,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i21.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i21.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
