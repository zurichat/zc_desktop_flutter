// Mocks generated by Mockito 5.0.16 from annotations
// in zc_desktop_flutter/test/helpers/test_helpers.dart.
// Do not manually edit this file.

import 'dart:async' as _i2;
import 'dart:ui' as _i18;

import 'package:dio/dio.dart' as _i3;
import 'package:flutter/material.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stacked_services/stacked_services.dart' as _i7;
import 'package:zc_desktop_flutter/model/app_models.dart' as _i4;
import 'package:zc_desktop_flutter/services/auth_service.dart' as _i5;
import 'package:zc_desktop_flutter/services/centrifuge_service.dart' as _i6;
import 'package:zc_desktop_flutter/services/channels_service.dart' as _i11;
import 'package:zc_desktop_flutter/services/dm_service.dart' as _i12;
import 'package:zc_desktop_flutter/services/local_storage_service.dart' as _i13;
import 'package:zc_desktop_flutter/services/organization_service.dart' as _i14;
import 'package:zc_desktop_flutter/services/recent_search_service.dart' as _i15;
import 'package:zc_desktop_flutter/services/startup_service.dart' as _i9;
import 'package:zc_desktop_flutter/services/user_service.dart' as _i16;
import 'package:zc_desktop_flutter/services/window_title_bar_service.dart'
    as _i17;
import 'package:zc_desktop_flutter/services/zuri_api/zuri_api_service.dart'
    as _i10;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeStreamController_0<T> extends _i1.Fake
    implements _i2.StreamController<T> {}

class _FakeDio_1 extends _i1.Fake implements _i3.Dio {}

class _FakeChannel_2 extends _i1.Fake implements _i4.Channel {}

class _FakeDummyUser_3 extends _i1.Fake implements _i4.DummyUser {}

class _FakeSendMessageResponse_4 extends _i1.Fake
    implements _i4.SendMessageResponse {}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i5.AuthService {
  @override
  set auth(_i4.Auth? _auth) =>
      super.noSuchMethod(Invocation.setter(#auth, _auth),
          returnValueForMissingStub: null);
  @override
  _i2.Future<void> loginUser({String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(
              #loginUser, [], {#email: email, #password: password}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> signup({String? password, String? email}) =>
      (super.noSuchMethod(
          Invocation.method(#signup, [], {#password: password, #email: email}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> confirmEmail(String? otpCode) =>
      (super.noSuchMethod(Invocation.method(#confirmEmail, [otpCode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> requestPasswordResetCode(String? email) =>
      (super.noSuchMethod(Invocation.method(#requestPasswordResetCode, [email]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> verifyPasswordResetCode(String? resetCode) => (super
      .noSuchMethod(Invocation.method(#verifyPasswordResetCode, [resetCode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> updateUserPassword(String? password) =>
      (super.noSuchMethod(Invocation.method(#updateUserPassword, [password]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  void logOut() => super.noSuchMethod(Invocation.method(#logOut, []),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [CentrifugeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCentrifugeService extends _i1.Mock implements _i6.CentrifugeService {
  @override
  _i2.StreamController<String> get messageStreamController =>
      (super.noSuchMethod(Invocation.getter(#messageStreamController),
              returnValue: _FakeStreamController_0<String>())
          as _i2.StreamController<String>);
  @override
  set messageStreamController(
          _i2.StreamController<String>? _messageStreamController) =>
      super.noSuchMethod(
          Invocation.setter(#messageStreamController, _messageStreamController),
          returnValueForMissingStub: null);
  @override
  String get websocketUrl =>
      (super.noSuchMethod(Invocation.getter(#websocketUrl), returnValue: '')
          as String);
  @override
  _i2.Future<dynamic> connect() =>
      (super.noSuchMethod(Invocation.method(#connect, []),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  void disconnect() => super.noSuchMethod(Invocation.method(#disconnect, []),
      returnValueForMissingStub: null);
  @override
  _i2.Future<dynamic> subscribe(String? channel) =>
      (super.noSuchMethod(Invocation.method(#subscribe, [channel]),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  String toString() => super.toString();
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i7.NavigationService {
  @override
  String get previousRoute =>
      (super.noSuchMethod(Invocation.getter(#previousRoute), returnValue: '')
          as String);
  @override
  String get currentRoute =>
      (super.noSuchMethod(Invocation.getter(#currentRoute), returnValue: '')
          as String);
  @override
  _i8.GlobalKey<_i8.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(Invocation.method(#nestedNavigationKey, [index]))
          as _i8.GlobalKey<_i8.NavigatorState>?);
  @override
  void config(
          {bool? enableLog,
          bool? defaultPopGesture,
          bool? defaultOpaqueRoute,
          Duration? defaultDurationTransition,
          bool? defaultGlobalState,
          String? defaultTransition}) =>
      super.noSuchMethod(
          Invocation.method(#config, [], {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransition: defaultTransition
          }),
          returnValueForMissingStub: null);
  @override
  _i2.Future<T?>? navigateWithTransition<T>(_i8.Widget? page,
          {bool? opaque,
          String? transition = r'',
          Duration? duration,
          bool? popGesture,
          int? id,
          _i8.Curve? curve,
          _i7.Bindings? binding,
          bool? fullscreenDialog = false,
          bool? preventDuplicates = true,
          _i7.Transition? transitionClass}) =>
      (super.noSuchMethod(Invocation.method(#navigateWithTransition, [
        page
      ], {
        #opaque: opaque,
        #transition: transition,
        #duration: duration,
        #popGesture: popGesture,
        #id: id,
        #curve: curve,
        #binding: binding,
        #fullscreenDialog: fullscreenDialog,
        #preventDuplicates: preventDuplicates,
        #transitionClass: transitionClass
      })) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? replaceWithTransition<T>(_i8.Widget? page,
          {bool? opaque,
          String? transition = r'',
          Duration? duration,
          bool? popGesture,
          int? id,
          _i8.Curve? curve,
          _i7.Bindings? binding,
          bool? fullscreenDialog = false,
          bool? preventDuplicates = true,
          _i7.Transition? transitionClass}) =>
      (super.noSuchMethod(Invocation.method(#replaceWithTransition, [
        page
      ], {
        #opaque: opaque,
        #transition: transition,
        #duration: duration,
        #popGesture: popGesture,
        #id: id,
        #curve: curve,
        #binding: binding,
        #fullscreenDialog: fullscreenDialog,
        #preventDuplicates: preventDuplicates,
        #transitionClass: transitionClass
      })) as _i2.Future<T?>?);
  @override
  bool back<T>({T? result, int? id}) => (super.noSuchMethod(
      Invocation.method(#back, [], {#result: result, #id: id}),
      returnValue: false) as bool);
  @override
  void popUntil(_i8.RoutePredicate? predicate) =>
      super.noSuchMethod(Invocation.method(#popUntil, [predicate]),
          returnValueForMissingStub: null);
  @override
  void popRepeated(int? popTimes) =>
      super.noSuchMethod(Invocation.method(#popRepeated, [popTimes]),
          returnValueForMissingStub: null);
  @override
  _i2.Future<T?>? navigateTo<T>(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#navigateTo, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? navigateToView<T>(_i8.Widget? view,
          {dynamic arguments,
          int? id,
          bool? opaque,
          _i8.Curve? curve,
          _i7.Bindings? binding,
          Duration? duration,
          bool? fullscreenDialog = false,
          bool? popGesture,
          bool? preventDuplicates = true,
          _i7.Transition? transition}) =>
      (super.noSuchMethod(Invocation.method(#navigateToView, [
        view
      ], {
        #arguments: arguments,
        #id: id,
        #opaque: opaque,
        #curve: curve,
        #binding: binding,
        #duration: duration,
        #fullscreenDialog: fullscreenDialog,
        #popGesture: popGesture,
        #preventDuplicates: preventDuplicates,
        #transition: transition
      })) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? replaceWith<T>(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#replaceWith, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? clearStackAndShow<T>(String? routeName,
          {dynamic arguments, int? id, Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#clearStackAndShow, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #parameters: parameters
      })) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? clearTillFirstAndShow<T>(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#clearTillFirstAndShow, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? clearTillFirstAndShowView<T>(_i8.Widget? view,
          {dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(#clearTillFirstAndShowView, [view],
          {#arguments: arguments, #id: id})) as _i2.Future<T?>?);
  @override
  _i2.Future<T?>? pushNamedAndRemoveUntil<T>(String? routeName,
          {_i8.RoutePredicate? predicate, dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(#pushNamedAndRemoveUntil, [
        routeName
      ], {
        #predicate: predicate,
        #arguments: arguments,
        #id: id
      })) as _i2.Future<T?>?);
  @override
  String toString() => super.toString();
}

/// A class which mocks [StartupService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStartupService extends _i1.Mock implements _i9.StartupService {
  @override
  bool get hasLoggedInUser => (super
          .noSuchMethod(Invocation.getter(#hasLoggedInUser), returnValue: false)
      as bool);
  @override
  void checkIfUserSavedToDisk() =>
      super.noSuchMethod(Invocation.method(#checkIfUserSavedToDisk, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ZuriApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockZuriApiService extends _i1.Mock implements _i10.ZuriApiService {
  @override
  _i3.Dio get dio =>
      (super.noSuchMethod(Invocation.getter(#dio), returnValue: _FakeDio_1())
          as _i3.Dio);
  @override
  _i2.Future<void> confirmEmail({String? otpCode}) => (super.noSuchMethod(
      Invocation.method(#confirmEmail, [], {#otpCode: otpCode}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<dynamic> login({String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#login, [], {#email: email, #password: password}),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<void> requestPasswordResetCode({String? email}) =>
      (super.noSuchMethod(
          Invocation.method(#requestPasswordResetCode, [], {#email: email}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> signup({String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#signup, [], {#email: email, #password: password}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> updateUserPassword({String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#updateUserPassword, [], {#password: password}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> verifyPasswordResetCode({String? resetCode}) =>
      (super.noSuchMethod(
          Invocation.method(
              #verifyPasswordResetCode, [], {#resetCode: resetCode}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> addLoggedInUserToOrganization(
          {String? organizationId, String? email, dynamic token}) =>
      (super.noSuchMethod(
          Invocation.method(#addLoggedInUserToOrganization, [],
              {#organizationId: organizationId, #email: email, #token: token}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<Map<String, dynamic>> createOrganizationUsingEmail(
          {String? email, dynamic token}) =>
      (super.noSuchMethod(
              Invocation.method(#createOrganizationUsingEmail, [],
                  {#email: email, #token: token}),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> fetchOrganizationDetails(
          {String? organizationId, dynamic token}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchOrganizationDetails, [],
                  {#organizationId: organizationId, #token: token}),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> fetchOrganizationsListFromRemote(
          {String? email, dynamic token}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchOrganizationsListFromRemote, [],
                  {#email: email, #token: token}),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> fetchUserDetails({String? userId}) => (super
      .noSuchMethod(Invocation.method(#fetchUserDetails, [], {#userId: userId}),
          returnValue:
              Future<Map<String, dynamic>>.value(<String, dynamic>{})) as _i2
      .Future<Map<String, dynamic>>);
  @override
  _i2.Future<dynamic> sendMessageToChannel(
          {dynamic channel_id,
          dynamic senderId,
          dynamic message,
          dynamic organization_id}) =>
      (super.noSuchMethod(
          Invocation.method(#sendMessageToChannel, [], {
            #channel_id: channel_id,
            #senderId: senderId,
            #message: message,
            #organization_id: organization_id
          }),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<String> fetchChannelSocketId(
          {String? channelId, String? organizationId, dynamic token}) =>
      (super.noSuchMethod(
          Invocation.method(#fetchChannelSocketId, [], {
            #channelId: channelId,
            #organizationId: organizationId,
            #token: token
          }),
          returnValue: Future<String>.value('')) as _i2.Future<String>);
  @override
  _i2.Future<dynamic> fetchChannelsListUsingOrgId(
          {String? organizationId, dynamic token}) =>
      (super.noSuchMethod(
          Invocation.method(#fetchChannelsListUsingOrgId, [],
              {#organizationId: organizationId, #token: token}),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> addUserToChannel(
          dynamic organizationId, dynamic channelId,
          {String? id,
          String? role_id,
          bool? is_admin,
          String? prop1,
          String? prop2,
          String? prop3}) =>
      (super.noSuchMethod(
          Invocation.method(#addUserToChannel, [
            organizationId,
            channelId
          ], {
            #id: id,
            #role_id: role_id,
            #is_admin: is_admin,
            #prop1: prop1,
            #prop2: prop2,
            #prop3: prop3
          }),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> removeUserFromChannel(
          {dynamic organizationId, dynamic channelId, dynamic memberId}) =>
      (super.noSuchMethod(
          Invocation.method(#removeUserFromChannel, [], {
            #organizationId: organizationId,
            #channelId: channelId,
            #memberId: memberId
          }),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<dynamic> createChannelsUsingOrgId(
          {dynamic sessionId,
          dynamic insertedOrganization,
          String? name,
          String? owner,
          String? description,
          bool? private}) =>
      (super.noSuchMethod(
          Invocation.method(#createChannelsUsingOrgId, [], {
            #sessionId: sessionId,
            #insertedOrganization: insertedOrganization,
            #name: name,
            #owner: owner,
            #description: description,
            #private: private
          }),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<Map<String, dynamic>> fetchChannelMessages(
          {String? channelId, String? organizationId}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchChannelMessages, [],
                  {#channelId: channelId, #organizationId: organizationId}),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> sendMessageToDM(
          {dynamic roomId, dynamic senderId, dynamic message}) =>
      (super.noSuchMethod(
              Invocation.method(#sendMessageToDM, [],
                  {#roomId: roomId, #senderId: senderId, #message: message}),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> markMessageAsRead(dynamic messageId) =>
      (super.noSuchMethod(Invocation.method(#markMessageAsRead, [messageId]),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> getRoomInfo({dynamic roomId}) => (super
          .noSuchMethod(Invocation.method(#getRoomInfo, [], {#roomId: roomId}),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
      as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> fetchRoomMessages({dynamic roomId}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchRoomMessages, [], {#roomId: roomId}),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i2.Future<Map<String, dynamic>>);
  @override
  _i2.Future<Map<String, dynamic>> createRoom(
          {_i4.User? currentUser, _i4.DummyUser? user}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createRoom, [], {#currentUser: currentUser, #user: user}),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i2.Future<Map<String, dynamic>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ChannelsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockChannelsService extends _i1.Mock implements _i11.ChannelsService {
  @override
  String get selectedCreatedOrganisationId =>
      (super.noSuchMethod(Invocation.getter(#selectedCreatedOrganisationId),
          returnValue: '') as String);
  @override
  void setChannel(_i4.Channel? channel) =>
      super.noSuchMethod(Invocation.method(#setChannel, [channel]),
          returnValueForMissingStub: null);
  @override
  _i4.Channel getChannel() =>
      (super.noSuchMethod(Invocation.method(#getChannel, []),
          returnValue: _FakeChannel_2()) as _i4.Channel);
  @override
  _i2.Future<List<_i4.Channel>> getChannels({String? organizationId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getChannels, [], {#organizationId: organizationId}),
              returnValue: Future<List<_i4.Channel>>.value(<_i4.Channel>[]))
          as _i2.Future<List<_i4.Channel>>);
  @override
  _i2.Future<void> createChannels(
          {String? name, String? owner, String? description, bool? private}) =>
      (super.noSuchMethod(
          Invocation.method(#createChannels, [], {
            #name: name,
            #owner: owner,
            #description: description,
            #private: private
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> addUserToChannel(
          {String? id,
          String? role_id,
          bool? is_admin,
          String? prop1,
          String? prop2,
          String? prop3}) =>
      (super.noSuchMethod(
          Invocation.method(#addUserToChannel, [], {
            #id: id,
            #role_id: role_id,
            #is_admin: is_admin,
            #prop1: prop1,
            #prop2: prop2,
            #prop3: prop3
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> handleRemoveUserFromChannel(
          {String? channel_id, String? member_id}) =>
      (super.noSuchMethod(
          Invocation.method(#handleRemoveUserFromChannel, [],
              {#channel_id: channel_id, #member_id: member_id}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<dynamic> sendMessage(
          {dynamic channel_id,
          dynamic senderId,
          dynamic message,
          dynamic org_id}) =>
      (super.noSuchMethod(
          Invocation.method(#sendMessage, [], {
            #channel_id: channel_id,
            #senderId: senderId,
            #message: message,
            #org_id: org_id
          }),
          returnValue: Future<dynamic>.value()) as _i2.Future<dynamic>);
  @override
  _i2.Future<List<_i4.ChannelMessage>> fetchChannelMessages() =>
      (super.noSuchMethod(Invocation.method(#fetchChannelMessages, []),
          returnValue: Future<List<_i4.ChannelMessage>>.value(
              <_i4.ChannelMessage>[])) as _i2.Future<List<_i4.ChannelMessage>>);
  @override
  _i2.Future<String> fetchChannelSocketId() =>
      (super.noSuchMethod(Invocation.method(#fetchChannelSocketId, []),
          returnValue: Future<String>.value('')) as _i2.Future<String>);
  @override
  String toString() => super.toString();
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [DMService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDMService extends _i1.Mock implements _i12.DMService {
  @override
  void setUser(_i4.DummyUser? user) =>
      super.noSuchMethod(Invocation.method(#setUser, [user]),
          returnValueForMissingStub: null);
  @override
  _i2.Future<_i4.DummyUser> getUser() =>
      (super.noSuchMethod(Invocation.method(#getUser, []),
              returnValue: Future<_i4.DummyUser>.value(_FakeDummyUser_3()))
          as _i2.Future<_i4.DummyUser>);
  @override
  _i2.Future<_i4.SendMessageResponse> sendMessage(
          dynamic roomId, dynamic senderId, dynamic message) =>
      (super.noSuchMethod(
              Invocation.method(#sendMessage, [roomId, senderId, message]),
              returnValue: Future<_i4.SendMessageResponse>.value(
                  _FakeSendMessageResponse_4()))
          as _i2.Future<_i4.SendMessageResponse>);
  @override
  _i2.Future<String?> createRoom(_i4.User? currentUser, _i4.DummyUser? user) =>
      (super.noSuchMethod(Invocation.method(#createRoom, [currentUser, user]),
          returnValue: Future<String?>.value()) as _i2.Future<String?>);
  @override
  _i2.Future<void> getRoomInfo(dynamic roomId) =>
      (super.noSuchMethod(Invocation.method(#getRoomInfo, [roomId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<List<_i4.Results>> fetchRoomMessages(dynamic roomId) =>
      (super.noSuchMethod(Invocation.method(#fetchRoomMessages, [roomId]),
              returnValue: Future<List<_i4.Results>>.value(<_i4.Results>[]))
          as _i2.Future<List<_i4.Results>>);
  @override
  _i2.Future<void> markMessageAsRead(dynamic messageId) =>
      (super.noSuchMethod(Invocation.method(#markMessageAsRead, [messageId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LocalStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageService extends _i1.Mock
    implements _i13.LocalStorageService {
  @override
  _i2.Future<void> saveToDisk<T>(String? key, T? content) =>
      (super.noSuchMethod(Invocation.method(#saveToDisk, [key, content]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  Object? getFromDisk(String? key) =>
      (super.noSuchMethod(Invocation.method(#getFromDisk, [key])) as Object?);
  @override
  _i2.Future<bool> removeFromDisk(String? key) =>
      (super.noSuchMethod(Invocation.method(#removeFromDisk, [key]),
          returnValue: Future<bool>.value(false)) as _i2.Future<bool>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [OrganizationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrganizationService extends _i1.Mock
    implements _i14.OrganizationService {
  @override
  int get selectedOrganization =>
      (super.noSuchMethod(Invocation.getter(#selectedOrganization),
          returnValue: 0) as int);
  @override
  void saveOrganizationId(String? orgId) =>
      super.noSuchMethod(Invocation.method(#saveOrganizationId, [orgId]),
          returnValueForMissingStub: null);
  @override
  String getOrganizationId() =>
      (super.noSuchMethod(Invocation.method(#getOrganizationId, []),
          returnValue: '') as String);
  @override
  void changeSelectedOrganization(int? index) => super.noSuchMethod(
      Invocation.method(#changeSelectedOrganization, [index]),
      returnValueForMissingStub: null);
  @override
  _i2.Future<List<_i4.Organization>> getOrganizations() =>
      (super.noSuchMethod(Invocation.method(#getOrganizations, []),
              returnValue:
                  Future<List<_i4.Organization>>.value(<_i4.Organization>[]))
          as _i2.Future<List<_i4.Organization>>);
  @override
  _i2.Future<void> addMemberToOrganization(String? organizationId) =>
      (super.noSuchMethod(
          Invocation.method(#addMemberToOrganization, [organizationId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> createOrganization(String? email) =>
      (super.noSuchMethod(Invocation.method(#createOrganization, [email]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  List<_i4.Organization> getUserSelectedOrganisations() =>
      (super.noSuchMethod(Invocation.method(#getUserSelectedOrganisations, []),
          returnValue: <_i4.Organization>[]) as List<_i4.Organization>);
  @override
  _i2.Future<void> saveUserSelectedOrganizations(
          List<_i4.Organization>? organizations) =>
      (super.noSuchMethod(
          Invocation.method(#saveUserSelectedOrganizations, [organizations]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [RecentSearchService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecentSearchService extends _i1.Mock
    implements _i15.RecentSearchService {
  @override
  _i2.Future<void> setRecentSearch(String? query) =>
      (super.noSuchMethod(Invocation.method(#setRecentSearch, [query]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<List<String>> getRecentSearch() =>
      (super.noSuchMethod(Invocation.method(#getRecentSearch, []),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i2.Future<List<String>>);
  @override
  _i2.Future<void> destroyRecentSearch() =>
      (super.noSuchMethod(Invocation.method(#destroyRecentSearch, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i16.UserService {
  @override
  String toString() => super.toString();
}

/// A class which mocks [WindowTitleBarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWindowTitleBarService extends _i1.Mock
    implements _i17.WindowTitleBarService {
  @override
  bool get isHome =>
      (super.noSuchMethod(Invocation.getter(#isHome), returnValue: false)
          as bool);
  @override
  set isHome(bool? value) =>
      super.noSuchMethod(Invocation.setter(#isHome, value),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void addListener(_i18.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i18.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
