name: CI
on:
 pull_request:
    branches:
      - dev
      - main

jobs:
  flutter_test:
    name: Run flutter test and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"
      - run: flutter pub get
      - run: flutter analyze

  check-state:
    runs-on: ubuntu-latest
    needs: [flutter_test]
    steps:
      - name: Comment
        if: steps.find-last-comment.outputs.comment-id == ''
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: context.issue.number
          body:  '⚙ Automated Unit Test Result ⚙\n\n All Tests Passed: ${{ needs.checkout_flutter.outputs.output1 }}'
          
        
  create-build:
    name: Create ${{ matrix.target }} build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target: [macOS, Windows, Linux]
        include:
        - os: macos-10.15
          target: macOS
          build_target: macos
          build_path: build/macos/Build/Products/Release
          asset_extension: .zip
          asset_content_type: application/zip
        - os: windows-2019
          target: Windows
          build_target: windows
          build_path: build\windows\runner\Release
          asset_extension: .zip
          asset_content_type: application/zip
        - os: ubuntu-20.04
          target: Linux
          build_target: linux
          build_path: build/linux/x64/release/bundle
          asset_extension: .tar.gz
          asset_content_type: application/gzip
      fail-fast: false
      
    steps:
    # Set up Flutter.
    - name: Clone Flutter repository with main channel
      uses: subosito/flutter-action@v1

    - name: Install Linux dependencies
      if: matrix.target == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev
    - name: Enable desktop support
      run: |
        flutter config --enable-linux-desktop
        flutter config --enable-macos-desktop
        flutter config --enable-windows-desktop
    - run: flutter doctor -v

    
    - name: Checkout zuri-chat code
      uses: actions/checkout@v2
    - run: flutter create .
    - run: flutter pub get

    # Build the application.
    - run: flutter build -v ${{ matrix.build_target }} --release

    # Package the build.
    - name: Copy VC redistributables to release directory for Windows
      if: matrix.target == 'Windows'
      run: |
        Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\msvcp140.dll') .
        Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140.dll') .
        Copy-Item (vswhere -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140_1.dll') .
    - name: Compress build for Linux
      if: matrix.target == 'Linux'
      run: tar czf $GITHUB_WORKSPACE/zuriChat_${{ matrix.target }}.tar.gz *
      working-directory: ${{ matrix.build_path }}
    - name: Compress build for macOS
      if: matrix.target == 'macOS'
      run: ditto -c -k --sequesterRsrc --keepParent zuriChat.app $GITHUB_WORKSPACE/zuriChat_${{ matrix.target }}.zip
      working-directory: ${{ matrix.build_path }}
    - name: Compress build for Windows
      if: matrix.target == 'Windows'
      run: compress-archive -Path * -DestinationPath ${env:GITHUB_WORKSPACE}\zuriChat_${{ matrix.target }}.zip
      working-directory: ${{ matrix.build_path }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Add packaged build to release draft
      id: upload_release_asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./zuriChat_${{ matrix.target }}${{ matrix.asset_extension }}
        asset_name: zuriChat_${{ matrix.target }}${{ matrix.asset_extension }}
        asset_content_type: ${{ matrix.asset_content_type }}
